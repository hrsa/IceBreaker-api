networks:
  icemelter_network:

volumes:
  postgres_data:
    driver: local
  redis_data:
    driver: local
  certbot_letsencrypt_data:
    driver: local
  certbot_www_data:
    driver: local
  logs:
    driver: local
  app_storage:
    driver: local


services:

  certbot:
    image: certbot/certbot:latest
    restart: no
    container_name: certbot
    volumes:
      - certbot_letsencrypt_data:/etc/letsencrypt
      - certbot_www_data:/tmp/letsencrypt
    command:
      - "certonly"
      - "--webroot"
      - "--agree-tos"
      - "--renew-by-default"
      - "--preferred-challenges"
      - "http-01"
      - "--server"
      - "https://acme-v02.api.letsencrypt.org/directory"
      - "--text"
      - "--email=${ADMIN_EMAIL}"
      - "-w"
      - "/tmp/letsencrypt"
      - "-d"
      - "${HOST},www.${HOST}"
    depends_on:
      nginx-no-ssl:
        condition: service_started

  nginx-no-ssl:
    image: hrsa/icemelter-nginx-no-ssl:production
    build:
      context: .
      dockerfile: ./docker/nginx.dockerfile
      target: no-ssl
      args:
        - UID=${UID:-1001}
        - GID=${GID:-1001}
        - USER=${USER:-anton}
    container_name: icemelter-nginx-no-ssl
    volumes:
      - certbot_letsencrypt_data:/etc/letsencrypt
      - certbot_www_data:/var/www/certbot
      - logs:/var/www/storage/logs
    ports:
      - "80:80"
    networks:
      - icemelter_network

  nginx:
    image: hrsa/icemelter-nginx:production
    build:
      context: .
      dockerfile: ./docker/nginx.dockerfile
      target: prod
      args:
        - UID=${UID:-1001}
        - GID=${GID:-1001}
        - USER=${USER:-anton}
    restart: unless-stopped
    container_name: icemelter-nginx
    volumes:
      - certbot_letsencrypt_data:/etc/letsencrypt
      - certbot_www_data:/var/www/certbot
      - logs:/var/www/storage/logs
    ports:
      - "80:80"
      - "443:443"
    depends_on:
      db:
        condition: service_healthy
      api:
        condition: service_healthy
    extra_hosts:
      - "host.docker.internal:host-gateway"
    networks:
      - icemelter_network

  api:
    image: hrsa/icemelter-api:production
    build:
      context: .
      dockerfile: docker/api.dockerfile
      target: prod
      args:
        - UID=${UID:-1001}
        - GID=${GID:-1001}
        - USER=${USER:-anton}
    container_name: icemelter-api
    ports:
      - "127.0.0.1:3000:3000"
    volumes:
      - app_storage:/app/storage
      - logs:/app/logs
      - .env:/app/.env
    networks:
      - icemelter_network
    depends_on:
      - db
      - redis
    healthcheck:
      test: [ "CMD-SHELL", "curl -f http://localhost:${APP_PORT:-3000} || exit 1" ]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s


  db:
    image: postgres:17
    container_name: icemelter-db
    environment:
      - POSTGRES_USER=${DB_USER}
      - POSTGRES_PASSWORD=${DB_PASSWORD}
      - POSTGRES_DB=${DB_NAME}
    ports:
      - "127.0.0.1:5432:5432"
    healthcheck:
      test: [ "CMD-SHELL", "pg_isready -U ${DB_USER} -d ${DB_NAME}" ]
      interval: 5s
      timeout: 30s
      retries: 6
    networks:
      - icemelter_network
    volumes:
      - postgres_data:/var/lib/postgresql/data

  redis:
    image: redis:7.4.3
    container_name: icemelter-redis
    restart: unless-stopped
    ports:
      - "127.0.0.1:6379:6379"
    command: redis-server --requirepass ${REDIS_PASSWORD} --save 60 1 --loglevel warning
    volumes:
      - redis_data:/data
    healthcheck:
      test: [ "CMD", "redis-cli", "ping" ]
      interval: 5s
      timeout: 30s
      retries: 6
    networks:
      - icemelter_network
