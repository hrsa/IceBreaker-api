name: Build and Deploy IceMelter

on:
  push:
    branches: [ master ]
  workflow_dispatch:
    inputs:
      environment:
        description: 'Environment to deploy to'
        required: true
        default: 'production'
        type: choice
        options:
          - production
          - staging

env:
  DOCKER_HUB_USERNAME: ${{ secrets.DOCKER_HUB_USERNAME }}
  DOCKER_HUB_TOKEN: ${{ secrets.DOCKER_HUB_TOKEN }}
  SERVER_HOST: ${{ secrets.SERVER_HOST }}
  SERVER_USER: ${{ secrets.SERVER_USER }}
  SERVER_SSH_KEY: ${{ secrets.SERVER_SSH_KEY }}
  VERSION: ${{ github.event.inputs.environment || 'production' }}-${{ github.sha }}

jobs:
  #  build-frontend:
  #    name: Build Frontend
  #    runs-on: ubuntu-latest
  #    outputs:
  #      cache-key: ${{ steps.cache-key.outputs.key }}
  #
  #    steps:
  #      - name: Generate unique cache key
  #        id: cache-key
  #        run: echo "key=frontend-${{ github.sha }}-${{ github.run_id }}" >> $GITHUB_OUTPUT
  #
  #      - name: Checkout frontend repository
  #        uses: actions/checkout@v4
  #        with:
  #          repository: hrsa/IceBreaker-frontend
  #          path: 'frontend'
  #          token: ${{ secrets.GH_FRONTEND_PAT }}
  #
  #      - name: Set up Node.js
  #        uses: actions/setup-node@v4
  #        with:
  #          node-version: '24'
  #          cache: 'npm'
  #          cache-dependency-path: 'frontend/package-lock.json'
  #
  #      - name: Create frontend .env file
  #        run: |
  #          echo "APP_ENV=${{ github.event.inputs.environment || 'production' }}" > frontend/.env
  #
  #      - name: Install frontend dependencies
  #        working-directory: frontend
  #        run: npm ci
  #
  #      - name: Build frontend
  #        working-directory: frontend
  #        run: npx expo export --clear
  #
  #      - name: Cache frontend build
  #        uses: actions/cache@v4
  #        with:
  #          path: frontend/dist
  #          key: ${{ steps.cache-key.outputs.key }}

  build-backend:
    name: Build and Test Backend
    runs-on: ubuntu-latest
    #    needs: build-frontend
    outputs:
      api-image: ${{ env.DOCKER_HUB_USERNAME }}/icemelter-api:${{ env.VERSION }}
      nginx-image: ${{ env.DOCKER_HUB_USERNAME }}/icemelter-nginx:${{ env.VERSION }}
      nginx-no-ssl-image: ${{ env.DOCKER_HUB_USERNAME }}/icemelter-nginx-no-ssl:${{ env.VERSION }}
    
    steps:
      - name: Checkout main repository
        uses: actions/checkout@v4
        with:
          path: 'backend'

      - name: Set up Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '24'
          cache: 'npm'
          cache-dependency-path: 'backend/package-lock.json'


      #      - name: Restore frontend build
      #        uses: actions/cache@v4
      #        with:
      #          path: frontend/dist
      #          key: ${{ needs.build-frontend.outputs.cache-key }}

      #      - name: Copy dist folder to backend
      #        run: |
      #          mkdir -p backend/dist
      #          cp -r frontend/dist/* backend/dist/

      - name: Create backend .env file
        working-directory: backend
        run: |
          cat > .env << EOF
          APP_ENV=${{ secrets.APP_ENV }}
          APP_PORT=${{ secrets.APP_PORT }}
          HOST=${{ secrets.HOST }}
          ADMIN_EMAIL=${{ secrets.ADMIN_EMAIL }}
          ADMIN_TELEGRAM_ID=${{ secrets.ADMIN_TELEGRAM_ID }}
          RESEND_API_KEY=${{ secrets.RESEND_API_KEY }}
          DB_HOST=${{ secrets.DB_HOST }}
          DB_NAME=${{ secrets.DB_NAME }}
          DB_USER=${{ secrets.DB_USER }}
          DB_PASSWORD=${{ secrets.DB_PASSWORD }}
          DB_PORT=${{ secrets.DB_PORT }}
          DB_SYNC=false
          JWT_SECRET=${{ secrets.JWT_SECRET }}
          REDIS_HOST=${{ secrets.REDIS_HOST }}
          REDIS_PORT=${{ secrets.REDIS_PORT }}
          REDIS_PASSWORD=${{ secrets.REDIS_PASSWORD }}
          REDIS_DB=${{ secrets.REDIS_DB }}
          SESSION_TTL=${{ secrets.SESSION_TTL }}
          TELEGRAM_BOT_TOKEN=${{ secrets.TELEGRAM_TEST_BOT_TOKEN }}
          TELEGRAM_BOT_DOMAIN=${{ secrets.TELEGRAM_BOT_DOMAIN }}
          TELEGRAM_BOT_HOOK_PATH=${{ secrets.TELEGRAM_BOT_HOOK_PATH }}
          TELEGRAM_BOT_PORT=${{ secrets.TELEGRAM_BOT_PORT }}
          KOFI_VERIFICATION_TOKEN=${{ secrets.KOFI_VERIFICATION_TOKEN }}
          BUY_COFFEE_LINK=${{ secrets.BUY_COFFEE_LINK }}
          GREETING_PROMPT=${{ secrets.GREETING_PROMPT }}
          HELLO_GENERATION_PROMPT=${{ secrets.HELLO_GENERATION_PROMPT }}
          GAME_GENERATION_PROMPT=${{ secrets.GAME_GENERATION_PROMPT }}
          TRANSLATION_PROMPT=${{ secrets.TRANSLATION_PROMPT }}
          OPENAI_API_KEY=${{ secrets.OPENAI_API_KEY }}  
          EOF

      - name: Create backend env.test file
        working-directory: backend
        run: |
          cat > .env.test << EOF
          APP_ENV=testing
          APP_PORT=${{ secrets.APP_PORT }}
          HOST=${{ secrets.HOST }}
          ADMIN_EMAIL=${{ secrets.ADMIN_EMAIL }}
          ADMIN_TELEGRAM_ID=${{ secrets.ADMIN_TELEGRAM_ID }}
          RESEND_API_KEY=${{ secrets.RESEND_API_KEY }}
          DB_HOST=${{ secrets.DB_HOST }}
          DB_NAME=${{ secrets.DB_NAME }}
          DB_USER=${{ secrets.DB_USER }}
          DB_PASSWORD=${{ secrets.DB_PASSWORD }}
          DB_PORT=${{ secrets.DB_PORT }}
          DB_SYNC=false
          JWT_SECRET=${{ secrets.JWT_SECRET }}
          REDIS_HOST=${{ secrets.REDIS_HOST }}
          REDIS_PORT=${{ secrets.REDIS_PORT }}
          REDIS_PASSWORD=${{ secrets.REDIS_PASSWORD }}
          REDIS_DB=${{ secrets.REDIS_DB }}
          SESSION_TTL=${{ secrets.SESSION_TTL }}
          TELEGRAM_BOT_TOKEN=${{ secrets.TELEGRAM_TEST_BOT_TOKEN }}
          TELEGRAM_BOT_DOMAIN=${{ secrets.TELEGRAM_BOT_DOMAIN }}
          TELEGRAM_BOT_HOOK_PATH=${{ secrets.TELEGRAM_BOT_HOOK_PATH }}
          TELEGRAM_BOT_PORT=${{ secrets.TELEGRAM_BOT_PORT }}
          KOFI_VERIFICATION_TOKEN=${{ secrets.KOFI_VERIFICATION_TOKEN }}
          BUY_COFFEE_LINK=${{ secrets.BUY_COFFEE_LINK }}
          GREETING_PROMPT=${{ secrets.GREETING_PROMPT }}
          HELLO_GENERATION_PROMPT=${{ secrets.HELLO_GENERATION_PROMPT }}
          GAME_GENERATION_PROMPT=${{ secrets.GAME_GENERATION_PROMPT }}
          TRANSLATION_PROMPT=${{ secrets.TRANSLATION_PROMPT }}
          OPENAI_API_KEY=${{ secrets.OPENAI_API_KEY }}
          EOF

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Login to Docker Hub
        uses: docker/login-action@v3
        with:
          username: ${{ env.DOCKER_HUB_USERNAME }}
          password: ${{ env.DOCKER_HUB_TOKEN }}

      - name: Start db container
        working-directory: backend
        run: |
          docker compose up -d db redis

      - name: Build API test image
        working-directory: backend
        run: |
          docker compose build api

      - name: Install dependencies
        working-directory: backend
        run: |
          npm i

      - name: Run tests
        working-directory: backend
        run: |
          docker compose run --rm api npm run test:e2e

      - name: Build production app
        working-directory: backend
        run: |
          npm run build

      - name: Build and push API image
        uses: docker/build-push-action@v6
        with:
          context: ./backend
          file: ./backend/docker/api.dockerfile
          target: prod
          push: true
          tags: |
            ${{ env.DOCKER_HUB_USERNAME }}/icemelter-api:${{ env.VERSION }}
            ${{ env.DOCKER_HUB_USERNAME }}/icemelter-api:latest
          build-args: |
            UID=1001
            GID=1001
            USER=anton
          cache-from: type=registry,ref=${{ env.DOCKER_HUB_USERNAME }}/icemelter-api:buildcache
          cache-to: type=registry,ref=${{ env.DOCKER_HUB_USERNAME }}/icemelter-api:buildcache,mode=max


      - name: Build and push Nginx image
        uses: docker/build-push-action@v6
        with:
          context: ./backend
          file: ./backend/docker/nginx.dockerfile
          target: prod
          push: true
          tags: |
            ${{ env.DOCKER_HUB_USERNAME }}/icemelter-nginx:${{ env.VERSION }}
            ${{ env.DOCKER_HUB_USERNAME }}/icemelter-nginx:latest
          build-args: |
            UID=1001
            GID=1001
            USER=anton
          cache-from: type=registry,ref=${{ env.DOCKER_HUB_USERNAME }}/icemelter-nginx:buildcache
          cache-to: type=registry,ref=${{ env.DOCKER_HUB_USERNAME }}/icemelter-nginx:buildcache,mode=max

      - name: Build and push Nginx No-SSL image
        uses: docker/build-push-action@v6
        with:
          context: ./backend
          file: ./backend/docker/nginx.dockerfile
          target: no-ssl
          push: true
          tags: |
            ${{ env.DOCKER_HUB_USERNAME }}/icemelter-nginx-no-ssl:${{ env.VERSION }}
            ${{ env.DOCKER_HUB_USERNAME }}/icemelter-nginx-no-ssl:latest
          build-args: |
            UID=1001
            GID=1001
            USER=anton
          cache-from: type=registry,ref=${{ env.DOCKER_HUB_USERNAME }}/icemelter-nginx-no-ssl:buildcache
          cache-to: type=registry,ref=${{ env.DOCKER_HUB_USERNAME }}/icemelter-nginx-no-ssl:buildcache,mode=max

      - name: Clean up
        working-directory: backend
        run: docker compose down

  deploy:
    name: Deploy to Server
    runs-on: ubuntu-latest
    needs: build-backend
    environment: ${{ github.event.inputs.environment || 'production' }}
    
    steps:
      - name: Checkout main repository
        uses: actions/checkout@v4
        with:
          path: 'backend'

      - name: Update docker-compose with version tags
        run: |
          cd backend
          sed -i "s|hrsa/icemelter-api:production|${{ env.DOCKER_HUB_USERNAME }}/icemelter-api:${{ env.VERSION }}|g" docker-compose-prod.yml
          sed -i "s|hrsa/icemelter-nginx:production|${{ env.DOCKER_HUB_USERNAME }}/icemelter-nginx:${{ env.VERSION }}|g" docker-compose-prod.yml
          sed -i "s|hrsa/icemelter-nginx-no-ssl:production|${{ env.DOCKER_HUB_USERNAME }}/icemelter-nginx-no-ssl:${{ env.VERSION }}|g" docker-compose-prod.yml

      - name: Create backend .env file
        working-directory: backend
        run: |
          cat > .env << EOF
          APP_ENV=production
          APP_PORT=${{ secrets.APP_PORT }}
          APP_URL=${{ secrets.APP_URL }}
          LOGO_URL=${{ secrets.LOGO_URL }}
          HOST=${{ secrets.HOST }}
          ADMIN_EMAIL=${{ secrets.ADMIN_EMAIL }}
          ADMIN_TELEGRAM_ID=${{ secrets.ADMIN_TELEGRAM_ID }}
          RESEND_API_KEY=${{ secrets.RESEND_API_KEY }}
          EMAIL_FROM=${{ secrets.EMAIL_FROM }}
          DB_HOST=${{ secrets.DB_HOST }}
          DB_NAME=${{ secrets.DB_NAME }}
          DB_USER=${{ secrets.DB_USER }}
          DB_PASSWORD=${{ secrets.DB_PASSWORD }}
          DB_PORT=${{ secrets.DB_PORT }}
          DB_SYNC=false
          JWT_SECRET=${{ secrets.JWT_SECRET }}
          REDIS_HOST=${{ secrets.REDIS_HOST }}
          REDIS_PORT=${{ secrets.REDIS_PORT }}
          REDIS_PASSWORD=${{ secrets.REDIS_PASSWORD }}
          REDIS_DB=${{ secrets.REDIS_DB }}
          SESSION_TTL=${{ secrets.SESSION_TTL }}
          TELEGRAM_BOT_TOKEN=${{ secrets.TELEGRAM_BOT_TOKEN }}
          TELEGRAM_BOT_DOMAIN=${{ secrets.TELEGRAM_BOT_DOMAIN }}
          TELEGRAM_BOT_HOOK_PATH=${{ secrets.TELEGRAM_BOT_HOOK_PATH }}
          TELEGRAM_BOT_PORT=${{ secrets.TELEGRAM_BOT_PORT }}
          KOFI_VERIFICATION_TOKEN=${{ secrets.KOFI_VERIFICATION_TOKEN }}
          BUY_COFFEE_LINK=${{ secrets.BUY_COFFEE_LINK }}
          GREETING_PROMPT=${{ secrets.GREETING_PROMPT }}
          HELLO_GENERATION_PROMPT=${{ secrets.HELLO_GENERATION_PROMPT }}
          GAME_GENERATION_PROMPT=${{ secrets.GAME_GENERATION_PROMPT }}
          TRANSLATION_PROMPT=${{ secrets.TRANSLATION_PROMPT }}
          OPENAI_API_KEY=${{ secrets.OPENAI_API_KEY }}  
          EOF

      - name: Create an SSH key
        run: |
          mkdir -p ~/.ssh/
          echo "${{ env.SERVER_SSH_KEY }}" > ~/.ssh/id_rsa
          chmod 600 ~/.ssh/id_rsa

      - name: Copy docker-compose and .env files to the server
        working-directory: backend
        run: |
          scp -o StrictHostKeyChecking=no .env ${{ env.SERVER_USER }}@${{ env.SERVER_HOST }}:/var/www
          scp -o StrictHostKeyChecking=no docker-compose-prod.yml ${{ env.SERVER_USER }}@${{ env.SERVER_HOST }}:/var/www

      - name: Deploy to server
        uses: appleboy/ssh-action@master
        with:
          host: ${{ env.SERVER_HOST }}
          username: ${{ env.SERVER_USER }}
          key: ${{ env.SERVER_SSH_KEY }}
          script: |
            cd /var/www
            if [ -f docker-compose.yml ]; then
              cp docker-compose.yml docker-compose.yml.backup
            fi
            
            docker compose down
            mv docker-compose-prod.yml docker-compose.yml
            docker system prune -a -f
            docker compose pull
            
            mkdir -p /var/www/certbot_tracker
            
            CERTBOT_LAST_RUN_FILE="/var/www/certbot_tracker/last_run.txt"
            CURRENT_DATE=$(date +%Y%m)
            
            if [ ! -f "$CERTBOT_LAST_RUN_FILE" ] || [ "$(cat $CERTBOT_LAST_RUN_FILE)" != "$CURRENT_DATE" ]; then
              echo "Running certbot renewal (last run: $([ -f "$CERTBOT_LAST_RUN_FILE" ] && cat $CERTBOT_LAST_RUN_FILE || echo 'never'))"
              docker compose run --rm certbot
              echo "$CURRENT_DATE" > "$CERTBOT_LAST_RUN_FILE"
            else
              echo "Skipping certbot renewal, already run this month"
            fi

            docker compose down
            docker compose up -d nginx
            
            echo "Waiting for application to be healthy..."
            timeout=120
            until curl -s -f http://${HOST:-localhost}/api/ > /dev/null || [ $timeout -le 0 ]
            do
              sleep 2
              ((timeout-=2))
              echo "Waiting for application... $timeout seconds left"
            done
            
            if [ $timeout -le 0 ]; then
              echo "Application failed to start in time, rolling back..."
              docker compose down
              mv docker-compose.yml.backup docker-compose.yml
              docker compose up -d nginx
              exit 1
            else
              echo "Application is healthy!"
              docker compose exec api npm run migration:runprod
              find /var/www -name "docker-compose.yml.backup*" -type f -mtime +7 -delete
            fi