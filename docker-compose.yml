networks:
  ice_breaker:

volumes:
  postgres_data:
    driver: local
  redis_data:
    driver: local


services:

#  nginx:
#    build:
#      context: .
#      dockerfile: docker/nginx.dockerfile
#      target: base
#      args:
#        - UID=${UID:-1001}
#        - GID=${GID:-1001}
#        - USER=${USER:-anton}
#    restart: unless-stopped
#    container_name: nginx
#    ports:
#      - "800:80"
#    volumes:
#      - ./docker/nginx-dev.conf:/etc/nginx/conf.d/default.conf
#      - ./dist/:/usr/share/nginx/html/
#    depends_on:
#      db:
#        condition: service_healthy
#      api:
#        condition: service_healthy
#    extra_hosts:
#      - "host.docker.internal:host-gateway"
#    networks:
#      - ice_breaker

#  api:
#    build:
#      context: .
#      dockerfile: docker/api.dockerfile
#      target: dev
#      args:
#        - UID=${UID:-1001}
#        - GID=${GID:-1001}
#        - USER=${USER:-anton}
#    container_name: lc-api
#    ports:
#      - "8000:8000"
#    volumes:
#      - ./:/app/
#    networks:
#      - ice_breaker
#    depends_on:
#      - db
#    healthcheck:
#      test: [ "CMD-SHELL", "curl -f http://localhost:8000/api/v1/health || exit 1" ]
#      interval: 30s
#      timeout: 10s
#      retries: 3
#      start_period: 40s


  db:
    image: postgres:17
    container_name: ib-db
    environment:
      - POSTGRES_USER=${DB_USER}
      - POSTGRES_PASSWORD=${DB_PASSWORD}
      - POSTGRES_DB=${DB_NAME}
    ports:
      - "5432:5432"
    healthcheck:
      test: [ "CMD-SHELL", "pg_isready -U ${DB_USER} -d ${DB_NAME}" ]
      interval: 5s
      timeout: 30s
      retries: 6
    networks:
      - ice_breaker
    volumes:
      - postgres_data:/var/lib/postgresql/data

  redis:
    image: redis:7.4.3
    container_name: ib-redis
    restart: unless-stopped
    ports:
      - "6379:6379"
    command: redis-server --requirepass ${REDIS_PASSWORD} --save 60 1 --loglevel warning
    volumes:
      - redis_data:/data
    healthcheck:
      test: [ "CMD", "redis-cli", "ping" ]
      interval: 5s
      timeout: 30s
      retries: 6
    networks:
      - ice_breaker

  redis-commander:
    image: rediscommander/redis-commander:latest
    container_name: ib-redis-commander
    restart: unless-stopped
    environment:
      - REDIS_HOSTS=local:redis:${REDIS_PORT}:${REDIS_DB}:${REDIS_PASSWORD}
      - HTTP_USER=admin
      - HTTP_PASSWORD=admin
    ports:
      - "8091:8081"
    networks:
      - ice_breaker
    depends_on:
      - redis
